import curses

from algobattle.observer import Observer


class Ui(Observer):
    def __init__(self) -> None:
        self.stdscr = curses.initscr()

    def update(self, match) -> None:
        """Receive updates by observing the match object."""
        self.output_formatted_ascii(match.match_data)

    def output_formatted_ascii(self, match_data: dict):
        """ Print out the provided match_data in an formatted way to the console.

        Parameters
        ----------
        match_data : dict
            dict containing data generated by match.run().
        """
        battle_abrv = {'iterated': 'ITR', 'averaged': 'AVG'}

        self.stdscr.refresh()
        self.stdscr.clear()
        print(r'              _    _             _           _   _   _       ' + '\n\r' +
            r'             / \  | | __ _  ___ | |__   __ _| |_| |_| | ___  '   + '\n\r' +
            r'            / _ \ | |/ _` |/ _ \| |_ \ / _` | __| __| |/ _ \ '   + '\n\r' +
            r'           / ___ \| | (_| | (_) | |_) | (_| | |_| |_| |  __/ '   + '\n\r' +
            r'          /_/   \_\_|\__, |\___/|_.__/ \__,_|\__|\__|_|\___| '   + '\n\r' +
            r'                      |___/                                   '  + '\n\r')

        # TODO: Print out version number.
        # TODO: UI for averaged battles.

        if match_data['type'] != 'iterated':
            print('Battles of type {} are currently not compatible with the ui.'.format(match_data['type']))
            raise Exception('The UI can only handle battles of type "iterated"! Incompatible battle type "{}" given!'.format(match_data['type']))

        print('╔═════════╦═════════╦' +
              ''.join(['══════╦' for i in range(match_data['iterations'])]) +
              '══════╦══════╦══════╗' + '\n\r' + 
            '║   SOL   ║   GEN   ' +
            ''.join(['║{:^6s}'.format('R' + str(i + 1)) for i in range(match_data['iterations'])]) +
            '║  CAP ║  AVG ║      ║' + '\n\r' +
            '╟─────────╫─────────╫' +
            ''.join(['──────╫' for i in range(match_data['iterations'])]) +
            '──────╫──────╫──────╢' + '\r')
        
        for match in match_data.keys():
            if isinstance(match, tuple):
                curr_iter = match_data[match]['curr_iter']
                average = sum(match_data[match][i]['solved'] for i in range(match_data['iterations'])) // match_data['iterations']

                print('║{:>9s}║{:>9s}'.format(match[0],match[1]) + 
                ''.join(['║{:>6d}'.format(match_data[match][i]['solved']) for i in range(len(match_data[match].keys()) - 2)])
                + '║{:>6d}║{:>6d}║{:>6s}║'.format(match_data[match][curr_iter]['cap'], average, "") + '\r')
        print('╚═════════╩═════════╩' +
        ''.join(['══════╩' for i in range(match_data['iterations'])]) +
        '══════╩══════╩══════╝' + '\n\r')