"""UI class, responsible for printing nicely formatted output to STDOUT."""
import curses

from algobattle.observer import Observer
from algobattle.match import Match


class Ui(Observer):
    """The UI Class declares methods to output information to STDOUT."""

    def __init__(self) -> None:
        self.stdscr = curses.initscr()

    def update(self, match: Match) -> None:
        """Receive updates by observing the match object.

        Parameters
        ----------
        match : dict
            The observed match object.
        """
        print(self.formatt_ascii(match.match_data))  # TODO: Refactor s.t. the output stream can be chosen by the user.

    def formatt_ascii(self, match_data: dict) -> None:
        """Format the provided match_data for the given battle_type.

        Parameters
        ----------
        match_data : dict
            dict containing match data generated by match.run().

        Returns
        -------
        str
            A formatted string on the basis of the match_data.
        """
        self.stdscr.refresh()
        self.stdscr.clear()
        print(r'              _    _             _           _   _   _       ' + '\n\r'
              + r'             / \  | | __ _  ___ | |__   __ _| |_| |_| | ___  ' + '\n\r'
              + r'            / _ \ | |/ _` |/ _ \| |_ \ / _` | __| __| |/ _ \ ' + '\n\r'
              + r'           / ___ \| | (_| | (_) | |_) | (_| | |_| |_| |  __/ ' + '\n\r'
              + r'          /_/   \_\_|\__, |\___/|_.__/ \__,_|\__|\__|_|\___| ' + '\n\r'
              + r'                      |___/                                  ' + '\n\r')

        # TODO: Print out version number.

        formatter = None
        if match_data['type'] == 'iterated':
            formatter = self.formatted_ascii_iterated
        elif match_data['type'] == 'averaged':
            formatter = self.formatted_ascii_averaged
        else:
            formatter = self.formatted_ascii_unknown

        return formatter(match_data)

    def formatted_ascii_iterated(self, match_data: dict) -> None:
        """Format the provided match_data for iterated battles.

        Parameters
        ----------
        match_data : dict
            dict containing match data generated by match.run().

        Returns
        -------
        str
            A formatted string on the basis of the match_data.
        """
        formatted_output_string = ""
        formatted_output_string += 'Battle Type: Iterated Battle\n\r'
        formatted_output_string += '╔═════════╦═════════╦' \
                                   + ''.join(['══════╦' for i in range(match_data['rounds'])]) \
                                   + '══════╦══════╗' + '\n\r' \
                                   + '║   SOL   ║   GEN   ' \
                                   + ''.join(['║{:^6s}'.format('R' + str(i + 1)) for i in range(match_data['rounds'])]) \
                                   + '║  CAP ║  AVG ║' + '\n\r' \
                                   + '╟─────────╫─────────╫' \
                                   + ''.join(['──────╫' for i in range(match_data['rounds'])]) \
                                   + '──────╫──────╢' + '\n\r'

        for pair in match_data.keys():
            if isinstance(pair, tuple):
                curr_round = match_data[pair]['curr_round']
                avg = sum(match_data[pair][i]['solved'] for i in range(match_data['rounds'])) // match_data['rounds']

                formatted_output_string += '║{:>9s}║{:>9s}'.format(pair[0], pair[1]) \
                                           + ''.join(['║{:>6d}'.format(match_data[pair][i]['solved'])
                                                     for i in range(match_data['rounds'])]) \
                                           + '║{:>6d}║{:>6d}║'.format(match_data[pair][curr_round]['cap'], avg) + '\r'
        formatted_output_string += '\n╚═════════╩═════════╩' \
                                   + ''.join(['══════╩' for i in range(match_data['rounds'])]) \
                                   + '══════╩══════╝' + '\n\r'

        return formatted_output_string

    def formatted_ascii_averaged(self, match_data: dict) -> None:
        """Format the provided match_data for averaged battles.

        Parameters
        ----------
        match_data : dict
            dict containing match data generated by match.run().

        Returns
        -------
        str
            A formatted string on the basis of the match_data.
        """
        formatted_output_string = ""
        formatted_output_string += 'Battle Type: Averaged Battle\n\r'
        formatted_output_string += '╔═════════╦═════════╦' \
                                   + ''.join(['══════╦' for i in range(match_data['rounds'])]) \
                                   + '══════╦══════╦════════╗' + '\n\r' \
                                   + '║   SOL   ║   GEN   ' \
                                   + ''.join(['║{:^6s}'.format('R' + str(i + 1)) for i in range(match_data['rounds'])]) \
                                   + '║ LAST ║ SIZE ║  ITER  ║' + '\n\r' \
                                   + '╟─────────╫─────────╫' \
                                   + ''.join(['──────╫' for i in range(match_data['rounds'])]) \
                                   + '──────╫──────╫────────╢' + '\n\r'

        for pair in match_data.keys():
            if isinstance(pair, tuple):

                avg = [0.0 for i in range(match_data['rounds'])]

                for i in range(match_data['rounds']):
                    executed_iters = len(match_data[pair][i]['approx_ratios'])
                    n_dead_iters = executed_iters - len([i for i in match_data[pair][i]['approx_ratios'] if i != 0.0])

                    if executed_iters - n_dead_iters > 0:
                        avg[i] = sum(match_data[pair][i]['approx_ratios']) // (executed_iters - n_dead_iters)

                curr_round = match_data[pair]['curr_round']
                curr_iter = len(match_data[pair][curr_round]['approx_ratios'])
                latest_approx_ratio = 0.0
                if match_data[pair][curr_round]['approx_ratios']:
                    latest_approx_ratio = match_data[pair][curr_round]['approx_ratios'][-1]

                formatted_output_string += '║{:>9s}║{:>9s}'.format(pair[0], pair[1]) \
                                           + ''.join(['║{:>6.2f}'.format(avg[i]) for i in range(match_data['rounds'])]) \
                                           + '║{:>6.2f}║{:>6d}║{:>3d}/{:>3d} ║'.format(latest_approx_ratio,
                                                                                       match_data['approx_inst_size'],
                                                                                       curr_iter,
                                                                                       match_data['approx_iters']) + '\r'
        formatted_output_string += '\n╚═════════╩═════════╩' \
                                   + ''.join(['══════╩' for i in range(match_data['rounds'])]) \
                                   + '══════╩══════╩════════╝' + '\n\r'

        return formatted_output_string

    def formatted_ascii_unknown(self, match_data: dict) -> None:
        """Formatter used when the given battle_type has no dedicated ui output method.

        Parameters
        ----------
        match_data : dict
            dict containing match data generated by match.run().

        Returns
        -------
        str
            A formatted string on the basis of the match_data.
        """
        formatted_output_string = ""

        formatted_output_string += 'Battles of type {} are currently not compatible with the ui.'.format(match_data['type'])
        formatted_output_string += 'Here is a dump of the match_data dict anyway:\n{}'.format(match_data)

        return formatted_output_string
